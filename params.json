{
  "name": "BetterBarcodes",
  "tagline": "The best way to read and display barcodes. ",
  "body": "- **Works on API level 14 and above**: That's 97% of all Android devices. BetterBarcodes takes care backwards compatibility so you don't have to worry about a thing!\r\n- **Extensive support of barcode formats**: Read and display 1D or 2D barcodes in almost all common formats.\r\n- **No lag, no loading times**: Uses the newest API and most efficient implementation to ensure the best possible performance and user experience.\r\n\r\n[![Build Status](https://travis-ci.org/Wrdlbrnft/BetterBarcodes.svg?branch=master)](https://travis-ci.org/Wrdlbrnft/BetterBarcodes)\r\n\r\n## How do I add it to my project?\r\n\r\nJust add this to the dependencies closure in your build.gradle:\r\n\r\n```groovy\r\ncompile 'com.github.wrdlbrnft:better-barcodes:0.2.0.23'\r\n```\r\n\r\n## Example App\r\n\r\nThere is an example app maintained for BetterBarcodes you can find it on GitHub [**here**](https://github.com/Wrdlbrnft/BetterBarcodes-Example-App).\r\n\r\nOr if you just want to test the library you can download the example app from the Play Store:\r\n\r\n[![Get it on Google Play](https://developer.android.com/images/brand/en_generic_rgb_wo_60.png)](https://play.google.com/store/apps/details?id=com.github.wrdlbrnft.betterbarcodes.example.app)\r\n\r\n## How do I use it?\r\n\r\nBetterBarcodes includes two ready to use Views which you can add to your layout:\r\n\r\n- `BarcodeView`: Displays a barcode in one or many different formats.\r\n- `BarcodeReaderView`: Reads a barcode by using the camera of the device.\r\n\r\n### BarcodeReaderView\r\n\r\n#### Basic usage\r\n\r\nThe `BarcodeReaderView` can be used to read a barcode of a format of your choosing.\r\n\r\nTo use the `BarcodeReaderView` add it to your layout like this:\r\n\r\n\r\n```xml \r\n<com.github.wrdlbrnft.betterbarcodes.views.reader.BarcodeReaderView\r\n    android:id=\"@+id/barcode_reader\"\r\n    android:layout_width=\"match_parent\"\r\n    android:layout_height=\"250dp\"\r\n    app:format=\"qr_code|code128\"/>\r\n```\r\n\r\nThe custom attribute `format` can be used to set the barcode formats you want to read. You can also do that at runtime by using the `setFormat()` method:\r\n\r\n```java\r\nbarcodeReaderView.setFormat(BarcodeFormat.QR_CODE, BarcodeFormat.CODE_128);\r\n```\r\n\r\nAfter that you need to start and stop the reading process by calling `start()` and `stop()`.\r\n\r\n - `start()`: Starts the camera preview and immediately starts looking any barcodes in the cameras field of view.\r\n - `stop()`: Stops the camera preview and stops looking for barcodes.\r\n\r\nUsually you would call `start()` in `onResume()` and `stop()` in `onPause()`. It is not recommended to leave the camera running while your app is in the background.\r\n\r\n```java\r\n@Override\r\npublic void onResume() {\r\n    super.onResume();\r\n    barcodeReaderView.start();\r\n}\r\n\r\n@Override\r\npublic void onPause() {\r\n    super.onPause();\r\n    barcodeReaderView.stop();\r\n}\r\n```\r\n\r\nYou can also independently control preview and scanning by calling `startPreview()` and `startScanning()` as well as `stopScanning()` and `stopPreview()`. However you cannot scan for barcodes without the preview running so calling `startScanning()` will also start the camera preview. In the same way `stopPreview()` will also stop scanning for barcodes.\r\n\r\n#### Runtime Permissions\r\n\r\nOn API levels 23 and above you need handle the runtime permission for the camera which the `BarcodeReaderView` has to use. There are two options:\r\n\r\n - Either you can handle them entirely on your own. In that case you need to make sure that `start()` is only called once the permission has been granted\r\n - However the preferable option is to use the permission request logic which is built into the `BarcodeReaderView`! \r\n \r\nUsing the built-in permission request logic is simple:\r\n\r\nYou have to set a `PermissionHandler` on the `BarcodeReaderView`. The `PermissionHandler` has callback methods to easily handle permission requests, show the permission rational when required and callbacks when the permission is granted or denied. To simplify implementing the `PermissionHandler` there is the `PermissionHandler.Adapter` class. The basic implementation - in this example in a `Fragment` - looks like this:\r\n\r\n```java\r\nprivate PermissionRequest mPermissionRequest;\r\n\r\n@Override\r\npublic void onViewCreated(View view, @Nullable Bundle savedInstanceState) {\r\n    super.onViewCreated(view, savedInstanceState);\r\n    barcodeReaderView.setCameraPermissionHandler(new PermissionHandler.Adapter() {\r\n        @Override\r\n        public void onNewPermissionRequest(PermissionRequest request) {\r\n            mPermissionRequest = request;\r\n            request.start(ExampleFragment.this);\r\n        }\r\n    });\r\n}\r\n\r\n@Override\r\npublic void onRequestPermissionsResult(int requestCode, @NonNull String[] permissions, @NonNull int[] grantResults) {\r\n    super.onRequestPermissionsResult(requestCode, permissions, grantResults);\r\n    mPermissionRequest.onRequestPermissionsResult(requestCode, permissions, grantResults);\r\n}\r\n```\r\n\r\nIn the `onNewPermissionRequest()` method of the `PermissionHandler` you have to save the `PermissionRequest` instance that is passed in a field. By calling `start()` on the `PermissionRequest` with the current instance of your `Fragment` or `Activity` you start the actual permission request process. Later in the `onRequestPermissionsResult()` callback in your `Fragment` or `Activty` you have to call the method of the same name on the `PermissionRequest` and pass in the parameters. This implementation is enough to handle a complete request for the permission. However you can also override additional methods to show a rationale and to handle cases where the permission is granted or denied:\r\n\r\n```java\r\nbarcodeReaderView.setCameraPermissionHandler(new PermissionHandler.Adapter() {\r\n\r\n    @Override\r\n    public void onNewPermissionRequest(PermissionRequest request) {\r\n        mPermissionRequest = request;\r\n        request.start(ReaderFragment.this);\r\n    }\r\n\r\n    @Override\r\n    public boolean onShowRationale() {\r\n\r\n        final AlertDialog rationaleDialog = new AlertDialog.Builder(getContext())\r\n                .setTitle(R.string.rationale_title)\r\n                .setMessage(R.string.rationale_message)\r\n                .setPositiveButton(android.R.string.ok, new DialogInterface.OnClickListener() {\r\n                    @Override\r\n                    public void onClick(DialogInterface dialogInterface, int button) {\r\n                        dialogInterface.dismiss();\r\n                        \r\n                        // Call this to continue the request process after showing your rationale in whatever way you want.\r\n                        mPermissionRequest.continueAfterRationale(ExampleFragment.this);\r\n                    }\r\n                })\r\n                .create();\r\n\r\n        rationaleDialog.show();\r\n        \r\n        // Return true here if you show a rationale\r\n        return true;\r\n    }\r\n\r\n    @Override\r\n    public void onPermissionGranted() {\r\n        // Called when the permission is granted\r\n    }\r\n\r\n    @Override\r\n    public void onPermissionDenied() {\r\n        // Called when the permission is denied\r\n    }\r\n});\r\n```\r\n\r\n### BarcodeView\r\n\r\nThe `BarcodeView` can be used to display barcodes in one or more formats. How the barcodes are displayed on the screen is controlled by a `BarcodeLayoutManager` instance. BetterBarcodes comes with a few predefined, ready to use `BarcodeLayoutManagers`.\r\n\r\nTo use the `BarcodeView` add it to your layout like this:\r\n\r\n```xml\r\n<com.github.wrdlbrnft.betterbarcodes.views.writer.BarcodeView\r\n    android:id=\"@+id/barcode_view\"\r\n    android:layout_width=\"match_parent\"\r\n    android:layout_height=\"250dp\"\r\n    app:format=\"qr_code|code128\"\r\n    app:text=\"@string/barcode_text\">\r\n```\r\n\r\nThe custom attribute `format` can be used to set the formats you want to display your barcode in. The custom attribute `text` is used to set the text the barcode should display, this can be a string or a string resource. \r\n\r\nOf course you can also set both of those things at runtime:\r\n\r\n```java\r\nbarcodeView.setFormat(BarcodeFormat.QR_CODE, BarcodeFormat.CODE_128);\r\nbarcodeView.setText(\"Some Text\");\r\n```\r\n\r\nPer default the `BarcodeView` uses the `HorizontalRotatingLayoutManager`. BetterBarcodes includes the following `BarcodeLayoutManager` implementations:\r\n\r\n - `SimpleVerticalBarcodeLayoutManager`\r\n - `LinearBarcodeLayoutManager`\r\n - `HorizontalRotatingLayoutManager`\r\n \r\nIf you want to use one of these you can set it using the `setLayoutManager()` method. Of course you can always implement your own `BarcodeLayoutManager`! To simplify this BetterBarcodes includes the `AbsBarcodeLayoutManager` class which you should use if you want to implement your own one.\r\n\r\n### Usage without the Views\r\n\r\nIf you just want to create a barcode image without using the `BarcodeView` you can do that like this:\r\n\r\n```java\r\nfinal BarcodeWriter writer = BarcodeWriters.forFormat(BarcodeFormat.QR_CODE);\r\nfinal Bitmap barcodeImage = writer.write(\"Some Text\", someWidth, someHeight);\r\n```\r\n\r\nYou can also read barcodes without using the `BarcodeReaderView`. \r\n\r\nYou can either place an `AspectRatioTextureView` in your layout and then create a `BarcodeReader` instance from it to read barcodes using them camera:\r\n\r\n```java\r\nfinal BarcodeReader reader = BarcodeReaders.get(context, aspectRatioTextureView);\r\nreader.setFormat(BarcodeFormat.QR_CODE, BarcodeFormat.CODE_128);\r\n\r\nreader.startPreview();\r\nreader.startScanning();\r\n...\r\nreader.stopScanning();\r\nreader.stopPreview();\r\n```\r\n\r\nThe `BarcodeReader` object works in principle the same way as the `BarcodeReaderView` does - including the way you can handle runtime permissions.\r\n\r\nHowever you can also read barcodes in bitmaps and images from other sources by using a `BarcodeImageDecoder`. It is recommended to use a try/catch/finally block like below to reliably read barcodes:\r\n\r\n```java\r\nfinal BarcodeImageDecoder decoder = BarcodeImageDecoders.forFormat(context, BarcodeFormat.QR_CODE, BarcodeFormat.CODE_128);\r\n\r\ntry {\r\n    final String text = decoder.decode(someImageAsByteArray, imageWidth, imageHeight);\r\n    // Barcode found and decoded\r\n} catch (FormatException | ChecksumException | NotFoundException e) {\r\n    // No Barcode found in the image or barcode is invalid.\r\n} finally {\r\n    // Every time a barcode is decoded you have to reset the BarcodeImageDecoder\r\n    decoder.reset();\r\n}\r\n```\r\n\r\n## Based on ZXing\r\n\r\nBetterBarcodes is using ZXing for encoding and decoding barcodes, check out their GitHub page [here](https://github.com/zxing/zxing).",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}