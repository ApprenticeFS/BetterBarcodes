{
  "name": "BetterBarcodes",
  "tagline": "The best way to read and display barcodes. ",
  "body": "- **Works on API level 14 and above**: That's 97% of all Android devices. BetterBarcodes takes care backwards compatibility so you don't have to worry about a thing!\r\n- **Extensive support of barcode formats**: Read and display 1D or 2D barcodes in almost all common formats.\r\n- **No lag, no loading times**: Uses the newest API and most efficient implementation to ensure the best possible performance and user experience.\r\n\r\n[![Build Status](https://travis-ci.org/Wrdlbrnft/BetterBarcodes.svg?branch=master)](https://travis-ci.org/Wrdlbrnft/BetterBarcodes)\r\n\r\n## How I add it to my project?\r\n\r\nJust add this to the dependencies closure in your build.gradle:\r\n\r\n```groovy\r\ncompile 'com.github.wrdlbrnft:better-barcodes:0.2.0.22'\r\n```\r\n\r\n## Example App\r\n\r\nThere is an example app maintained for BetterBarcodes you can find it on GitHub [**here**]().\r\n\r\nOr if you just want to test the library you can download the example app from the Play Store:\r\n\r\n[![Get it on Google Play](https://developer.android.com/images/brand/en_generic_rgb_wo_60.png)](https://play.google.com/store/apps/details?id=com.github.wrdlbrnft.betterbarcodes.example.app)\r\n\r\n## Features\r\n\r\nBetterBarcodes includes two ready to use Views which you can add to your layout:\r\n\r\n- `BarcodeView`: Displays a barcode in one or many different formats.\r\n- `BarcodeReaderView`: Reads a barcode by using the camera of the device.\r\n\r\n### BarcodeReaderView\r\n\r\nThe `BarcodeReaderView` can be used to read a barcode of a format of your choosing.\r\n\r\nTo use the `BarcodeReaderView` add it to your layout like this:\r\n\r\n\r\n```xml \r\n<com.github.wrdlbrnft.betterbarcodes.views.reader.BarcodeReaderView\r\n    android:id=\"@+id/barcode_reader\"\r\n    android:layout_width=\"match_parent\"\r\n    android:layout_height=\"250dp\"\r\n    app:format=\"qr_code|code128\"/>\r\n```\r\n\r\nThe custom attribute `format` can be used to set the barcode formats you want to read. You can also do that at runtime by using the `setFormat()` method:\r\n\r\n```java\r\nbarcodeReaderView.setFormat(BarcodeFormat.QR_CODE, BarcodeFormat.CODE_128);\r\n```\r\n\r\nAfter that you need to start and stop the reading process by calling `start()` and `stop()`.\r\n\r\n - `start()`: Starts the camera preview and immediately starts looking any barcodes in the cameras field of view.\r\n - `stop()`: Stops the camera preview and stops looking for barcodes.\r\n\r\nUsually you would call `start()` in `onResume()` and `stop()` in `onPause()`. It is not recommended to leave the camera running while your app is in the background.\r\n\r\n```java\r\n@Override\r\npublic void onResume() {\r\n    super.onResume();\r\n    barcodeReaderView.start();\r\n}\r\n\r\n@Override\r\npublic void onPause() {\r\n    super.onPause();\r\n    barcodeReaderView.stop();\r\n}\r\n```\r\n\r\nYou can also independently control preview and scanning by calling `startPreview()` and `startScanning()` as well as `stopScanning()` and `stopPreview()`. However you cannot scan for barcodes without the preview running so calling `startScanning()` will also start the camera preview. In the same way `stopPreview()` will also stop scanning for barcodes.\r\n\r\n### BarcodeView\r\n\r\nThe `BarcodeView` can be used to display barcodes in one or more formats. How the barcodes are displayed on the screen is controlled by a `BarcodeLayoutManager` instance. BetterBarcodes comes with a few predefined, ready to use `BarcodeLayoutManagers`.\r\n\r\nTo use the `BarcodeView` add it to your layout like this:\r\n\r\n```xml\r\n<com.github.wrdlbrnft.betterbarcodes.views.writer.BarcodeView\r\n    android:id=\"@+id/barcode_view\"\r\n    android:layout_width=\"match_parent\"\r\n    android:layout_height=\"250dp\"\r\n    app:format=\"qr_code|code128\"\r\n    app:text=\"@string/barcode_text\">\r\n```\r\n\r\nThe custom attribute `format` can be used to set the formats you want to display your barcode in. The custom attribute `text` is used to set the text the barcode should display, this can be a string or a string resource. \r\n\r\nOf course you can also set both of those things at runtime:\r\n\r\n```java\r\nbarcodeView.setFormat(BarcodeFormat.QR_CODE, BarcodeFormat.CODE_128);\r\nbarcodeView.setText(\"Some Text\");\r\n```\r\n\r\nPer default the `BarcodeView` uses the `HorizontalRotatingLayoutManager`. BetterBarcodes includes the following `BarcodeLayoutManager` implementations:\r\n\r\n - `SimpleVerticalBarcodeLayoutManager`\r\n - `LinearBarcodeLayoutManager`\r\n - `HorizontalRotatingLayoutManager`\r\n \r\nIf you want to use one of these you can set it using the `setLayoutManager()` method. Of course you can always implement your own `BarcodeLayoutManager`! To simplify this BetterBarcodes includes the `AbsBarcodeLayoutManager` class which you should use if you want to implement your own one.\r\n\r\n### Usage without the Views\r\n\r\nIf you just want to create a barcode image without using the `BarcodeView` you can do that like this:\r\n\r\n```java\r\nfinal BarcodeWriter writer = BarcodeWriters.forFormat(BarcodeFormat.QR_CODE);\r\nfinal Bitmap barcodeImage = writer.write(\"Some Text\", someWidth, someHeight);\r\n```\r\n\r\nYou can also read barcodes without using the `BarcodeReaderView`, however you need to use the `AspectRatioTextureView` which is also included in the BetterBarcodes library:\r\n\r\n```java\r\nfinal BarcodeReader reader = BarcodeReaders.get(getContext(), aspectRatioTextureView);\r\nreader.setFormat(BarcodeFormat.QR_CODE, BarcodeFormat.CODE_128);\r\n\r\nreader.startPreview();\r\nreader.startScanning();\r\n...\r\nreader.stopScanning();\r\nreader.stopPreview();\r\n```\r\n\r\nThe `BarcodeReader` object works in principle the same way as the `BarcodeReaderView` does.\r\n\r\n## Based on ZXing\r\n\r\nBetterBarcodes is using ZXing for encoding and decoding barcodes, check out their GitHub page [here](https://github.com/zxing/zxing).",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}